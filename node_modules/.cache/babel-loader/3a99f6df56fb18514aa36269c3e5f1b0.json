{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Documents/Projects/stp-react/stp-react/src/components/schoolProfile.js\";\nimport React from 'react';\nimport ProfileData from '../data/schoolProfiles.json';\n\nfunction SchoolProfile({\n  match\n}) {\n  //console.log(match.params.name);\n  // Select correct school from profile list using match parameter.\n  const schoolSelector = ProfileData.filter(value => {\n    if (value.name === match.params.name) {\n      return value;\n    }\n  });\n  const schoolDetails = schoolSelector.map(school => {\n    return React.createElement(React.Fragment, null, React.createElement(\"img\", {\n      src: school.schoolLogoUrl,\n      class: \"card-img-top mx-auto\",\n      alt: \"...\",\n      style: {\n        width: 200 + 'px',\n        height: 200 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      class: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, school.name), React.createElement(\"p\", {\n      class: \"card-subtitle text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, school.address), React.createElement(\"div\", {\n      className: \"card-body\",\n      style: {\n        width: 40 + 'vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      class: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Overview\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, school.name, \" is a \", school.type, \" \", school.grades, \" school that comprises roughly \", school.students, \" students and \", school.staff, \" staff members. About \", school.busZone, \"% of their student population lives in the bus zone, and \", school.walkZone, \"% live in the walk zone. Bell times are \", school.amBell, \" and \", school.pmBell, \". The school has a \", school.programs, \".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), \"School buses load from the \", school.busBay, \". City sidewalks in the school area are complete and students may access the school on foot from many directions. The parking lot is \", school.parkingStatus, \" to parents, so those who need to drive should safely find parking in the \", school.parkingLocation, \".\"))));\n  }); // Create a list of programs conducted at the selected school.\n\n  const programSelector = schoolSelector.map(program => {\n    let schoolPrograms = [];\n    let programTitles = Object.keys(program);\n    let programValues = Object.values(program); //console.log(programTitles);\n    //console.log(programValues);\n\n    for (let i = 0; i < programTitles.length; i++) {\n      if (programValues[i] === 'TRUE') {\n        let regex = /(?=[A-Z0-9])/;\n        let splitTitle = programTitles[i].split(regex);\n        let newTitle = [];\n\n        for (let j = 0; j < splitTitle.length; j++) {\n          let capitalized = splitTitle[j].charAt(0).toUpperCase();\n          newTitle.push(capitalized + splitTitle[j].slice(1));\n        }\n\n        let outName = newTitle.join(' ');\n        schoolPrograms.push(outName);\n      }\n    }\n\n    return schoolPrograms;\n  }); // create cards for each program conducted at the selected school.\n\n  const cardCreator = programSelector[0].map(program => {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      class: \"col-sm-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"card mx-auto\",\n      style: {\n        width: 45 + 'vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"...\",\n      class: \"card-img-top\",\n      alt: \"...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      class: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, program), React.createElement(\"p\", {\n      class: \"card-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Some quick example text to build on the card title and make up the bulk of the card's content.\")))));\n  });\n  return React.createElement(\"div\", {\n    class: \"card mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, schoolDetails, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"School Travel Planning Interventions\")), React.createElement(\"div\", {\n    class: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, cardCreator));\n}\n\n;\nexport default SchoolProfile;","map":{"version":3,"sources":["/Users/administrator/Documents/Projects/stp-react/stp-react/src/components/schoolProfile.js"],"names":["React","ProfileData","SchoolProfile","match","schoolSelector","filter","value","name","params","schoolDetails","map","school","schoolLogoUrl","width","height","address","type","grades","students","staff","busZone","walkZone","amBell","pmBell","programs","busBay","parkingStatus","parkingLocation","programSelector","program","schoolPrograms","programTitles","Object","keys","programValues","values","i","length","regex","splitTitle","split","newTitle","j","capitalized","charAt","toUpperCase","push","slice","outName","join","cardCreator"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProfileData from '../data/schoolProfiles.json';\n\n\nfunction SchoolProfile({match}) {\n  //console.log(match.params.name);\n\n  // Select correct school from profile list using match parameter.\n  const schoolSelector = ProfileData.filter(value => {\n    if (value.name === match.params.name){\n      return value;\n    }\n    });\n\n  const schoolDetails = schoolSelector.map((school) => {\n    return <>\n      <img src={school.schoolLogoUrl} class=\"card-img-top mx-auto\" alt=\"...\" style={{width: 200 + 'px', height: 200 + 'px'}}></img>\n      <div class=\"card-body\">\n        <h1 class=\"card-title\">{school.name}</h1>\n        <p class=\"card-subtitle text-muted\">{school.address}</p>\n        <div className=\"card-body\" style={{width: 40 + 'vw'}}>\n          <h3 class=\"card-title\">Overview</h3>\n          <p>\n            {school.name} is a {school.type} {school.grades} school that comprises roughly {school.students} students and {school.staff} staff members. About {school.busZone}% of their student population lives in the bus zone, and {school.walkZone}% live in the walk zone. Bell times are {school.amBell} and {school.pmBell}. The school has a {school.programs}.\n            <br></br>\n            <br></br>\n            School buses load from the {school.busBay}. City sidewalks in the school area are complete and students may access the school on foot from many directions. The parking lot is {school.parkingStatus} to parents, so those who need to drive should safely find parking in the {school.parkingLocation}.\n          </p>\n        </div>\n      </div>\n    </>\n  })\n\n  // Create a list of programs conducted at the selected school.\n  const programSelector = schoolSelector.map((program) => {\n    let schoolPrograms = [];\n      let programTitles = Object.keys(program);\n      let programValues = Object.values(program);\n      //console.log(programTitles);\n      //console.log(programValues);\n      for (let i = 0; i < programTitles.length; i++){\n        if (programValues[i] === 'TRUE'){\n          let regex = /(?=[A-Z0-9])/;\n          let splitTitle = programTitles[i].split(regex);\n          let newTitle = [];\n          for (let j = 0; j < splitTitle.length; j++){\n            let capitalized = splitTitle[j].charAt(0).toUpperCase();\n            newTitle.push(capitalized + splitTitle[j].slice(1));\n          }\n          let outName = newTitle.join(' ');\n          schoolPrograms.push(outName);\n      }\n    }\n    return schoolPrograms;\n  })\n  // create cards for each program conducted at the selected school.\n  const cardCreator = programSelector[0].map((program) => {\n    return <>\n      <div class=\"col-sm-6\">\n        <div class=\"card mx-auto\" style={{width: 45 + 'vw'}}>\n          <img src=\"...\" class=\"card-img-top\" alt=\"...\"></img>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{program}</h5>\n            <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n          </div>\n        </div>\n      </div>\n    </>\n  })\n\n  return (\n    <div class=\"card mb-3\">\n      {schoolDetails}\n      <div>\n        <h3>School Travel Planning Interventions</h3>\n      </div>\n      <div class=\"row\">\n        {cardCreator}\n      </div>\n    </div>\n\n  );\n};\n\nexport default SchoolProfile;\n"]},"metadata":{},"sourceType":"module"}